"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.reWriteChecklyConfigFile = exports.addItemToArray = exports.addOrReplaceItem = exports.findPropertyByName = void 0;
const recast = __importStar(require("recast"));
const node_path_1 = __importDefault(require("node:path"));
const promises_1 = __importDefault(require("node:fs/promises"));
const ast_types_1 = require("ast-types");
function findPropertyByName(ast, name) {
    let node;
    recast.visit(ast, {
        visitProperty(path) {
            if (path.node.key.name === name) {
                node = path.node;
            }
            return false;
        },
    });
    return node;
}
exports.findPropertyByName = findPropertyByName;
function addOrReplaceItem(ast, node, name) {
    const item = findPropertyByName(ast, name);
    if (item) {
        item.value = node.value;
    }
    else {
        ast.properties.push(node);
    }
}
exports.addOrReplaceItem = addOrReplaceItem;
function addItemToArray(ast, node, name) {
    if (!ast_types_1.namedTypes.ObjectExpression.check(ast)) {
        throw new Error('AST node is not an ObjectExpression');
    }
    const item = findPropertyByName(ast, name);
    if (item) {
        if (ast_types_1.namedTypes.ArrayExpression.check(item.value)) {
            item.value.elements = item.value.elements || [];
            item.value.elements.push(node);
        }
        else {
            throw new Error(`Property "${name}" exists but is not an array`);
        }
    }
    else {
        ast.properties.push({
            type: 'Property',
            key: { type: 'Identifier', name },
            value: { type: 'ArrayExpression', elements: [node] },
            kind: 'init',
            computed: false,
            method: false,
            shorthand: false,
        });
    }
}
exports.addItemToArray = addItemToArray;
async function reWriteChecklyConfigFile(data, fileName, dir) {
    await promises_1.default.writeFile(node_path_1.default.join(dir, fileName), data);
}
exports.reWriteChecklyConfigFile = reWriteChecklyConfigFile;
//# sourceMappingURL=write-config-helpers.js.map