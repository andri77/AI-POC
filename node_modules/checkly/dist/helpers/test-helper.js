"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.splitChecklyAndPlaywrightFlags = exports.prepareReportersTypes = exports.preparePrivateRunLocation = exports.prepareRunLocation = void 0;
const constructs_1 = require("../constructs");
const ci_info_1 = require("ci-info");
const constants_1 = require("./constants");
async function prepareRunLocation(configOptions = {}, cliFlags = {}, api, accountId) {
    // Command line options take precedence
    if (cliFlags.runLocation) {
        const { data: availableLocations } = await api.locations.getAll();
        if (availableLocations.some((l) => l.region === cliFlags.runLocation)) {
            return { type: 'PUBLIC', region: cliFlags.runLocation };
        }
        throw new Error(`Unable to run checks on unsupported location "${cliFlags.runLocation}". `
            + `Supported locations are:\n${availableLocations.map((l) => `${l.region}`).join('\n')}`);
    }
    else if (cliFlags.privateRunLocation) {
        return preparePrivateRunLocation(cliFlags.privateRunLocation, api, accountId);
    }
    else if (configOptions.runLocation && configOptions.privateRunLocation) {
        throw new Error('Both runLocation and privateRunLocation fields were set in your Checkly config file.'
            + ` Please only specify one run location. The configured locations were' +
        ' "${configOptions.runLocation}" and "${configOptions.privateRunLocation}"`);
    }
    else if (configOptions.runLocation) {
        return { type: 'PUBLIC', region: configOptions.runLocation };
    }
    else if (configOptions.privateRunLocation) {
        return preparePrivateRunLocation(configOptions.privateRunLocation, api, accountId);
    }
    else {
        return { type: 'PUBLIC', region: constants_1.DEFAULT_REGION };
    }
}
exports.prepareRunLocation = prepareRunLocation;
async function preparePrivateRunLocation(privateLocationSlugName, api, accountId) {
    try {
        const privateLocations = await constructs_1.Session.getPrivateLocations();
        const privateLocation = privateLocations.find(({ slugName }) => slugName === privateLocationSlugName);
        if (privateLocation) {
            return { type: 'PRIVATE', id: privateLocation.id, slugName: privateLocationSlugName };
        }
        const { data: account } = await api.accounts.get(accountId);
        throw new Error(`The specified private location "${privateLocationSlugName}" was not found on account "${account.name}".`);
    }
    catch (err) {
        throw new Error(`Failed to get private locations. ${err.message}.`);
    }
}
exports.preparePrivateRunLocation = preparePrivateRunLocation;
function prepareReportersTypes(reporterFlag, cliReporters = []) {
    if (!reporterFlag && !cliReporters.length) {
        return [ci_info_1.isCI ? 'ci' : 'list'];
    }
    return reporterFlag ? [reporterFlag] : cliReporters;
}
exports.prepareReportersTypes = prepareReportersTypes;
function splitChecklyAndPlaywrightFlags(args) {
    const separatorIndex = args.indexOf('--');
    let checklyFlags = [];
    let playwrightFlags = [];
    if (separatorIndex !== -1) {
        checklyFlags = args.slice(0, separatorIndex);
        playwrightFlags = args.slice(separatorIndex + 1);
    }
    else {
        checklyFlags = args;
    }
    return { checklyFlags, playwrightFlags };
}
exports.splitChecklyAndPlaywrightFlags = splitChecklyAndPlaywrightFlags;
//# sourceMappingURL=test-helper.js.map