"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseProject = void 0;
const path = __importStar(require("path"));
const util_1 = require("./util");
const constructs_1 = require("../constructs");
const ref_1 = require("../constructs/ref");
const construct_1 = require("../constructs/construct");
const playwright_check_1 = require("../constructs/playwright-check");
const BASE_CHECK_DEFAULTS = {};
async function parseProject(opts) {
    const { directory, checkMatch = '**/*.check.{js,ts}', checkFilter, includeTestOnlyChecks = false, browserCheckMatch, multiStepCheckMatch, projectLogicalId, projectName, repoUrl, ignoreDirectoriesMatch = [], checkDefaults = {}, browserCheckDefaults = {}, availableRuntimes, defaultRuntimeId, verifyRuntimeDependencies, checklyConfigConstructs, playwrightConfigPath, include, playwrightChecks, } = opts;
    const project = new constructs_1.Project(projectLogicalId, {
        name: projectName,
        repoUrl,
    });
    if (includeTestOnlyChecks) {
        project.allowTestOnly(true);
    }
    checklyConfigConstructs?.forEach(construct => project.addResource(construct.type, construct.logicalId, construct));
    constructs_1.Session.project = project;
    constructs_1.Session.basePath = directory;
    constructs_1.Session.checkDefaults = Object.assign({}, BASE_CHECK_DEFAULTS, checkDefaults);
    constructs_1.Session.checkFilter = checkFilter;
    constructs_1.Session.browserCheckDefaults = browserCheckDefaults;
    constructs_1.Session.availableRuntimes = availableRuntimes;
    constructs_1.Session.defaultRuntimeId = defaultRuntimeId;
    constructs_1.Session.verifyRuntimeDependencies = verifyRuntimeDependencies ?? true;
    // TODO: Do we really need all of the ** globs, or could we just put node_modules?
    const ignoreDirectories = ['**/node_modules/**', '**/.git/**', ...ignoreDirectoriesMatch];
    await loadAllCheckFiles(directory, checkMatch, ignoreDirectories);
    // Load sequentially because otherwise Session.checkFileAbsolutePath and
    // Session.checkFilePath are going to be subject to race conditions.
    await loadAllBrowserChecks(directory, browserCheckMatch, ignoreDirectories, project);
    await loadAllMultiStepChecks(directory, multiStepCheckMatch, ignoreDirectories, project);
    await loadPlaywrightChecks(directory, playwrightChecks, playwrightConfigPath, include);
    // private-location must be processed after all checks and groups are loaded.
    await loadAllPrivateLocationsSlugNames(project);
    return project;
}
exports.parseProject = parseProject;
function setCheckFilePaths(checkFile, directory) {
    const relPath = (0, util_1.pathToPosix)(path.relative(directory, checkFile));
    constructs_1.Session.checkFileAbsolutePath = checkFile;
    constructs_1.Session.checkFilePath = relPath;
    return relPath;
}
function resetCheckFilePaths() {
    constructs_1.Session.checkFilePath = undefined;
    constructs_1.Session.checkFileAbsolutePath = undefined;
}
// eslint-disable-next-line require-await
async function loadPlaywrightChecks(directory, playwrightChecks, playwrightConfigPath, include) {
    if (!playwrightConfigPath) {
        return;
    }
    if (playwrightChecks?.length) {
        try {
            setCheckFilePaths(playwrightConfigPath, directory);
            for (const playwrightCheckProps of playwrightChecks) {
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                const playwrightCheck = new playwright_check_1.PlaywrightCheck(playwrightCheckProps.logicalId, {
                    ...playwrightCheckProps,
                    playwrightConfigPath,
                    include,
                });
            }
        }
        finally {
            resetCheckFilePaths();
        }
    }
    else {
        try {
            setCheckFilePaths(playwrightConfigPath, directory);
            const basePath = path.basename(playwrightConfigPath);
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            const playwrightCheck = new playwright_check_1.PlaywrightCheck(basePath, {
                name: basePath,
                playwrightConfigPath,
                include,
            });
        }
        finally {
            resetCheckFilePaths();
        }
    }
}
async function loadAllCheckFiles(directory, checkFilePattern, ignorePattern) {
    const checkFiles = await (0, util_1.findFilesWithPattern)(directory, checkFilePattern, ignorePattern);
    for (const checkFile of checkFiles) {
        try {
            setCheckFilePaths(checkFile, directory);
            await constructs_1.Session.loadFile(checkFile);
        }
        finally {
            resetCheckFilePaths();
        }
    }
}
function getExistingEntrypoints(project) {
    const files = new Set();
    Object.values(project.data.check).forEach(check => {
        if (check instanceof constructs_1.BrowserCheck && (0, construct_1.isEntrypoint)(check.code)) {
            const absoluteEntrypoint = check.resolveContentFilePath(check.code.entrypoint);
            const relativeEntrypoint = constructs_1.Session.relativePosixPath(absoluteEntrypoint);
            files.add(relativeEntrypoint);
            return;
        }
        if (check instanceof constructs_1.MultiStepCheck && (0, construct_1.isEntrypoint)(check.code)) {
            const absoluteEntrypoint = check.resolveContentFilePath(check.code.entrypoint);
            const relativeEntrypoint = constructs_1.Session.relativePosixPath(absoluteEntrypoint);
            files.add(relativeEntrypoint);
            return;
        }
    });
    return files;
}
async function loadAllBrowserChecks(directory, browserCheckFilePattern, ignorePattern, project) {
    if (!browserCheckFilePattern) {
        return;
    }
    const checkFiles = await (0, util_1.findFilesWithPattern)(directory, browserCheckFilePattern, ignorePattern);
    const preexistingCheckFiles = getExistingEntrypoints(project);
    for (const checkFile of checkFiles) {
        try {
            const relPath = setCheckFilePaths(checkFile, directory);
            // Don't create an additional check if the checkFile was already added
            // to a check in loadAllCheckFiles.
            if (preexistingCheckFiles.has(relPath)) {
                continue;
            }
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            const browserCheck = new constructs_1.BrowserCheck((0, util_1.pathToPosix)(relPath), {
                name: path.basename(checkFile),
                code: {
                    entrypoint: checkFile,
                },
            });
        }
        finally {
            resetCheckFilePaths();
        }
    }
}
async function loadAllMultiStepChecks(directory, multiStepCheckFilePattern, ignorePattern, project) {
    if (!multiStepCheckFilePattern) {
        return;
    }
    const checkFiles = await (0, util_1.findFilesWithPattern)(directory, multiStepCheckFilePattern, ignorePattern);
    const preexistingCheckFiles = getExistingEntrypoints(project);
    for (const checkFile of checkFiles) {
        try {
            const relPath = setCheckFilePaths(checkFile, directory);
            // Don't create an additional check if the checkFile was already added
            // to a check in loadAllCheckFiles.
            if (preexistingCheckFiles.has(relPath)) {
                continue;
            }
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            const multistepCheck = new constructs_1.MultiStepCheck((0, util_1.pathToPosix)(relPath), {
                name: path.basename(checkFile),
                code: {
                    entrypoint: checkFile,
                },
            });
        }
        finally {
            resetCheckFilePaths();
        }
    }
}
// TODO: create a function to process slug names for check or check-group to reduce duplicated code.
async function loadAllPrivateLocationsSlugNames(project) {
    /**
     * Search for slug names in all Checks and CheckGroups privateLocations properties. Then, create non-member
     * private-locations and assigments if needed.
     * This logic allow as to get the private-location id searching by slug names and make use
     * of PrivateLocation.fromId() under the hood.
     */
    const resourcesWithSlugNames = [...Object.values(project.data.check), ...Object.values(project.data['check-group'])]
        .filter(g => g.privateLocations?.some(pl => typeof pl === 'string'));
    if (!resourcesWithSlugNames.length) {
        return;
    }
    const privateLocations = await constructs_1.Session.getPrivateLocations();
    resourcesWithSlugNames.forEach(resource => {
        // only slug names strings are processed here, the instances referenced are handle by the resource class
        const resourceSlugNames = resource.privateLocations?.filter(pl => typeof pl === 'string') ?? [];
        resourceSlugNames.forEach(sn => {
            // check if the slug name could be replaced by the instance within the project
            const isSlugNameFromProjectPrivateLocation = Object.values(project.data['private-location']).find(pl => pl.slugName === sn);
            if (isSlugNameFromProjectPrivateLocation) {
                throw new Error(`${resource.constructor.name} '${resource.logicalId}' is using a slug name '${sn}' to reference project private-location. Please, replace the slug name with the instance.`);
            }
            const privateLocation = privateLocations.find(pl => pl.slugName === sn);
            if (!privateLocation) {
                throw new Error(`${resource.constructor.name} '${resource.logicalId}' is using a private-location '${sn}' not found in your account. Please, review your configuration and try again.`);
            }
            // only create the non member private-location if it wasn't already added
            const privateLocationAlreadyCreated = Object.values(project.data['private-location']).find(pl => pl.physicalId === privateLocation.id);
            let privateLocationLogicalId = '';
            if (!privateLocationAlreadyCreated) {
                const nonMemberPrivateLocation = constructs_1.PrivateLocation.fromId(privateLocation.id);
                privateLocationLogicalId = nonMemberPrivateLocation.logicalId;
            }
            else {
                privateLocationLogicalId = privateLocationAlreadyCreated.logicalId;
            }
            // create the private-location/check assignment
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            const assignment = resource instanceof constructs_1.Check
                ? new constructs_1.PrivateLocationCheckAssignment(`private-location-check-assignment#${resource.logicalId}#${privateLocationLogicalId}`, {
                    privateLocationId: ref_1.Ref.from(privateLocationLogicalId),
                    checkId: ref_1.Ref.from(resource.logicalId),
                })
                : new constructs_1.PrivateLocationGroupAssignment(`private-location-group-assignment#${resource.logicalId}#${privateLocationLogicalId}`, {
                    privateLocationId: ref_1.Ref.from(privateLocationLogicalId),
                    groupId: ref_1.Ref.from(resource.logicalId),
                });
        });
    });
}
//# sourceMappingURL=project-parser.js.map