"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaywrightProject = exports.PlaywrightConfig = void 0;
const path = __importStar(require("node:path"));
function toAbsolutePath(dir, file) {
    return path.resolve(dir, file);
}
function parseBrowsers(config) {
    const browsers = new Set();
    const browserKeywords = ['browserName', 'defaultBrowserType', 'channel'];
    for (const browserKeyword of browserKeywords) {
        if (config?.use?.[browserKeyword]) {
            browsers.add(config?.use[browserKeyword]);
        }
    }
    return browsers;
}
function buildSnapshotTemplates(config, filePath) {
    const fileRelativePath = path.relative(config.testDir, filePath);
    const parsed = path.parse(fileRelativePath);
    return Array.from(config.snapshotTemplates).map(template => {
        return template
            .replace(/\{(.)?testDir\}/g, '$1' + config.testDir)
            .replace(/\{(.)?snapshotDir\}/g, '$1' + config.snapshotDir)
            .replace(/\{(.)?testFileDir\}/g, '$1' + parsed.dir)
            .replace(/\{(.)?platform\}/g, '$1' + config.platform)
            .replace(/\{(.)?projectName\}/g, config.projectName)
            .replace(/\{(.)?testName\}/g, '$1' + '*')
            .replace(/\{(.)?testFileName\}/g, '$1' + parsed.base)
            .replace(/\{(.)?testFilePath\}/g, '$1' + fileRelativePath)
            .replace(/\{(.)?arg\}/g, '$1' + '*')
            .replace(/\{(.)?ext\}/g, '$1' + '.*');
    });
}
const DEFAULT_SNAPSHOT_TEMPLATE = '{snapshotDir}/{testFilePath}-snapshots/{arg}{ext}';
class PlaywrightConfig {
    projectName;
    configFilePath;
    platform;
    testDir;
    snapshotDir;
    testMatch;
    snapshotTemplates;
    browsers;
    projects;
    files;
    constructor(filePath, playwrightConfig) {
        const dir = path.dirname(filePath);
        this.projectName = '';
        this.platform = 'linux';
        this.testDir = playwrightConfig.testDir ? toAbsolutePath(dir, playwrightConfig.testDir) : dir;
        this.snapshotDir = playwrightConfig.snapshotDir ? toAbsolutePath(dir, playwrightConfig.snapshotDir) : this.testDir;
        this.files = new Set();
        this.snapshotTemplates = new Set();
        const testMatch = playwrightConfig.testMatch ?? ['**/*.@(spec|test).?(c|m)[jt]s?(x)'];
        this.testMatch = new Set(Array.isArray(testMatch) ? testMatch : [testMatch]);
        this.configFilePath = filePath;
        const fileDefinitions = ['tsconfig', 'globalSetup', 'globalTeardown'];
        for (const fileDefinition of fileDefinitions) {
            const definition = playwrightConfig[fileDefinition];
            if (!definition) {
                continue;
            }
            if (Array.isArray(definition)) {
                definition.forEach((file) => this.files.add(file));
            }
            else {
                this.files.add(definition);
            }
        }
        if (playwrightConfig.snapshotPathTemplate) {
            this.snapshotTemplates.add(playwrightConfig.snapshotPathTemplate);
        }
        const expect = playwrightConfig.expect;
        if (expect?.toHaveScreenshot?.pathTemplate) {
            this.snapshotTemplates.add(expect.toHaveScreenshot.pathTemplate);
        }
        if (expect?.toMatchAriaSnapshot?.pathTemplate) {
            this.snapshotTemplates.add(expect.toMatchAriaSnapshot.pathTemplate);
        }
        if (this.snapshotTemplates.size === 0) {
            this.snapshotTemplates.add(DEFAULT_SNAPSHOT_TEMPLATE);
        }
        this.browsers = parseBrowsers(playwrightConfig);
        if (playwrightConfig.projects?.length) {
            this.projects = playwrightConfig.projects.map((project) => new PlaywrightProject(dir, this, project));
        }
    }
    getFiles() {
        const files = new Set(this.files);
        this.projects?.forEach(project => project.files.forEach(file => files.add(file)));
        return Array.from(files);
    }
    getBrowsers() {
        const browsers = new Set(this.browsers);
        this.projects?.forEach(project => project.browsers.forEach(browser => browsers.add(browser)));
        if (browsers.size === 0) {
            // Add the default browser
            browsers.add('chromium');
        }
        return Array.from(browsers);
    }
    addFiles(...files) {
        files.forEach(this.files.add, this.files);
    }
    getSnapshotPath(filePath) {
        return buildSnapshotTemplates(this, filePath);
    }
}
exports.PlaywrightConfig = PlaywrightConfig;
class PlaywrightProject {
    projectName;
    platform;
    testDir;
    snapshotDir;
    testMatch;
    expect;
    files;
    snapshotTemplates;
    browsers;
    constructor(dir, playwrightConfig, playwrightProject) {
        this.projectName = playwrightProject.name;
        this.platform = 'linux';
        this.testDir = playwrightProject.testDir ? toAbsolutePath(dir, playwrightProject.testDir) : playwrightConfig.testDir;
        this.snapshotDir = playwrightProject.snapshotDir
            ? toAbsolutePath(dir, playwrightProject.snapshotDir)
            : (playwrightConfig.snapshotDir ?? this.testDir);
        this.files = new Set();
        this.snapshotTemplates = new Set();
        const testMatch = playwrightProject.testMatch ?? Array.from(playwrightConfig.testMatch);
        this.testMatch = new Set(Array.isArray(testMatch) ? testMatch : [testMatch]);
        const snapshotPathTemplate = playwrightProject.snapshotPathTemplate ?? playwrightConfig.snapshotPathTemplate;
        if (snapshotPathTemplate) {
            this.snapshotTemplates.add(snapshotPathTemplate);
        }
        // Check if the project overrides the global expect field
        const expect = playwrightProject.expect ?? playwrightConfig.expect;
        if (expect?.toHaveScreenshot?.pathTemplate) {
            this.snapshotTemplates.add(expect.toHaveScreenshot.pathTemplate);
        }
        if (expect?.toMatchAriaSnapshot?.pathTemplate) {
            this.snapshotTemplates.add(expect.toMatchAriaSnapshot.pathTemplate);
        }
        if (this.snapshotTemplates.size === 0) {
            this.snapshotTemplates.add(DEFAULT_SNAPSHOT_TEMPLATE);
        }
        this.browsers = parseBrowsers(playwrightProject);
    }
    getSnapshotPath(filePath) {
        return buildSnapshotTemplates(this, filePath);
    }
    addFiles(...files) {
        files.forEach(this.files.add, this.files);
    }
}
exports.PlaywrightProject = PlaywrightProject;
//# sourceMappingURL=playwright-config.js.map