"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiCheckCodegen = void 0;
const codegen_1 = require("./internal/codegen");
const sourcegen_1 = require("../sourcegen");
const check_codegen_1 = require("./check-codegen");
const api_request_codegen_1 = require("./api-request-codegen");
const construct = 'ApiCheck';
class ApiCheckCodegen extends codegen_1.Codegen {
    describe(resource) {
        return `API Check: ${resource.name}`;
    }
    gencode(logicalId, resource, context) {
        const filePath = context.filePath('resources/api-checks', resource.name, {
            tags: resource.tags,
            isolate: true,
            unique: true,
        });
        const file = this.program.generatedConstructFile(filePath.fullPath);
        file.namedImport(construct, 'checkly/constructs');
        file.section((0, sourcegen_1.expr)((0, sourcegen_1.ident)(construct), builder => {
            builder.new(builder => {
                builder.string(logicalId);
                builder.object(builder => {
                    builder.value('request', (0, api_request_codegen_1.valueForRequest)(this.program, file, context, resource.request));
                    if (resource.localSetupScript) {
                        const content = resource.localSetupScript;
                        (0, codegen_1.validateScript)(content);
                        const snippetFiles = context.findScriptSnippetFiles(content);
                        for (const snippetFile of snippetFiles) {
                            const localSnippetFile = this.program.generatedSupportFile(`${file.dirname}/snippets/${snippetFile.basename}`);
                            localSnippetFile.plainImport(localSnippetFile.relativePath(snippetFile));
                        }
                        builder.object('setupScript', builder => {
                            const scriptFile = this.program.staticSupportFile(`${file.dirname}/setup-script`, content);
                            builder.string('entrypoint', file.relativePath(scriptFile));
                        });
                    }
                    else if (resource.setupSnippetId) {
                        const snippetFile = context.lookupAuxiliarySnippetFile(resource.setupSnippetId);
                        if (!snippetFile) {
                            throw new Error(`Setup script refers to snippet #${resource.setupSnippetId} which is missing`);
                        }
                        const scriptFile = this.program.generatedSupportFile(`${file.dirname}/setup-script`);
                        scriptFile.plainImport(scriptFile.relativePath(snippetFile));
                        builder.object('setupScript', builder => {
                            builder.string('entrypoint', file.relativePath(scriptFile));
                        });
                    }
                    if (resource.localTearDownScript) {
                        const content = resource.localTearDownScript;
                        (0, codegen_1.validateScript)(content);
                        const snippetFiles = context.findScriptSnippetFiles(content);
                        for (const snippetFile of snippetFiles) {
                            const aliasFile = this.program.generatedSupportFile(`${file.dirname}/snippets/${snippetFile.basename}`);
                            aliasFile.plainImport(aliasFile.relativePath(snippetFile));
                        }
                        builder.object('tearDownScript', builder => {
                            const scriptFile = this.program.staticSupportFile(`${file.dirname}/teardown-script`, content);
                            builder.string('entrypoint', file.relativePath(scriptFile));
                        });
                    }
                    else if (resource.tearDownSnippetId) {
                        const snippetFile = context.lookupAuxiliarySnippetFile(resource.tearDownSnippetId);
                        if (!snippetFile) {
                            throw new Error(`Teardown script refers to snippet #${resource.tearDownSnippetId} which is missing`);
                        }
                        const scriptFile = this.program.generatedSupportFile(`${file.dirname}/teardown-script`);
                        scriptFile.plainImport(scriptFile.relativePath(snippetFile));
                        builder.object('tearDownScript', builder => {
                            builder.string('entrypoint', file.relativePath(scriptFile));
                        });
                    }
                    if (resource.degradedResponseTime !== undefined) {
                        builder.number('degradedResponseTime', resource.degradedResponseTime);
                    }
                    if (resource.maxResponseTime !== undefined) {
                        builder.number('maxResponseTime', resource.maxResponseTime);
                    }
                    (0, check_codegen_1.buildRuntimeCheckProps)(this.program, file, builder, resource, context);
                });
            });
        }));
    }
}
exports.ApiCheckCodegen = ApiCheckCodegen;
//# sourceMappingURL=api-check-codegen.js.map