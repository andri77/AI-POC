import { ApiCheck } from './api-check';
import { Bundle } from './construct';
import { SharedFileRef } from './project';
export interface ApiCheckBundleProps {
    localSetupScript?: string;
    setupScriptPath?: string;
    setupScriptDependencies?: SharedFileRef[];
    localTearDownScript?: string;
    tearDownScriptPath?: string;
    tearDownScriptDependencies?: SharedFileRef[];
}
export declare class ApiCheckBundle implements Bundle {
    apiCheck: ApiCheck;
    localSetupScript?: string;
    setupScriptPath?: string;
    setupScriptDependencies?: SharedFileRef[];
    localTearDownScript?: string;
    tearDownScriptPath?: string;
    tearDownScriptDependencies?: SharedFileRef[];
    constructor(apiCheck: ApiCheck, props: ApiCheckBundleProps);
    synthesize(): {
        localSetupScript: string | undefined;
        setupScriptPath: string | undefined;
        setupScriptDependencies: number[] | undefined;
        localTearDownScript: string | undefined;
        tearDownScriptPath: string | undefined;
        tearDownScriptDependencies: number[] | undefined;
        checkType: string;
        request: import("./api-request").Request;
        degradedResponseTime: number | undefined;
        maxResponseTime: number | undefined;
        runtimeId: string | undefined;
        environmentVariables: import("./key-value-pair").default[] | undefined;
        name: string;
        activated: boolean | undefined;
        muted: boolean | undefined;
        shouldFail: boolean | undefined;
        locations: (keyof import("..").Region)[] | undefined;
        privateLocations: undefined;
        tags: string[] | undefined;
        frequency: number | undefined;
        frequencyOffset: number | undefined;
        groupId: import("./ref").Ref | null;
        retryStrategy: import("./retry-strategy").RetryStrategy | null | undefined;
        doubleCheck: boolean | undefined;
        alertSettings: import("./alert-escalation-policy").AlertEscalation | undefined;
        useGlobalAlertSettings: boolean | undefined;
        runParallel: boolean | undefined;
        triggerIncident: {
            serviceId: import("./ref").Ref;
            severity: "MINOR" | "MEDIUM" | "MAJOR" | "CRITICAL";
            name: string;
            description: string;
            notifySubscribers: boolean;
        } | undefined;
    };
}
