"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dashboard = void 0;
const promises_1 = __importDefault(require("node:fs/promises"));
const construct_1 = require("./construct");
const project_1 = require("./project");
const construct_diagnostics_1 = require("./construct-diagnostics");
const dashboard_bundle_1 = require("./dashboard-bundle");
/**
 * Creates a Dashboard
 *
 * @remarks
 *
 * This class make use of the Dashboard endpoints.
 */
class Dashboard extends construct_1.Construct {
    tags;
    customUrl;
    customDomain;
    logo;
    favicon;
    link;
    header;
    description;
    width;
    refreshRate;
    paginate;
    paginationRate;
    checksPerPage;
    useTagsAndOperator;
    hideTags;
    enableIncidents;
    expandChecks;
    showHeader;
    customCSS;
    isPrivate;
    showP95;
    showP99;
    static __checklyType = 'dashboard';
    /**
     * Constructs the Dashboard instance
     *
     * @param logicalId unique project-scoped resource name identification
     * @param props dashboard configuration properties
     *
     * {@link https://checklyhq.com/docs/cli/constructs-reference/#dashboard Read more in the docs}
     */
    constructor(logicalId, props) {
        super(Dashboard.__checklyType, logicalId);
        this.tags = props.tags;
        this.customUrl = props.customUrl;
        this.customDomain = props.customDomain;
        this.logo = props.logo;
        this.favicon = props.favicon;
        this.link = props.link;
        this.header = props.header;
        this.description = props.description;
        this.width = props.width;
        this.refreshRate = props.refreshRate;
        this.paginate = props.paginate;
        this.paginationRate = props.paginationRate;
        this.checksPerPage = props.checksPerPage;
        this.useTagsAndOperator = props.useTagsAndOperator;
        this.hideTags = props.hideTags;
        this.enableIncidents = props.enableIncidents;
        this.expandChecks = props.expandChecks;
        this.showHeader = props.showHeader;
        this.isPrivate = props.isPrivate;
        this.showP95 = props.showP95;
        this.showP99 = props.showP99;
        this.customCSS = props.customCSS;
        project_1.Session.registerConstruct(this);
    }
    describe() {
        return `Dashboard:${this.logicalId}`;
    }
    async validate(diagnostics) {
        await super.validate(diagnostics);
        if (!this.customUrl && !this.customDomain) {
            diagnostics.add(new construct_diagnostics_1.InvalidPropertyValueDiagnostic('customUrl', new Error(`Required unless "customDomain" is set.`)));
            diagnostics.add(new construct_diagnostics_1.InvalidPropertyValueDiagnostic('customDomain', new Error(`Required unless "customUrl" is set.`)));
        }
        if (this.customCSS) {
            if (!(0, construct_1.isEntrypoint)(this.customCSS) && !(0, construct_1.isContent)(this.customCSS)) {
                diagnostics.add(new construct_diagnostics_1.InvalidPropertyValueDiagnostic('customCSS', new Error(`Either "entrypoint" or "content" is required.`)));
            }
            else if ((0, construct_1.isEntrypoint)(this.customCSS) && (0, construct_1.isContent)(this.customCSS)) {
                diagnostics.add(new construct_diagnostics_1.InvalidPropertyValueDiagnostic('customCSS', new Error(`Provide exactly one of "entrypoint" or "content", but not both.`)));
            }
            else if ((0, construct_1.isEntrypoint)(this.customCSS)) {
                const entrypoint = this.resolveContentFilePath(this.customCSS.entrypoint);
                try {
                    await promises_1.default.access(entrypoint, promises_1.default.constants.R_OK);
                }
                catch (err) {
                    diagnostics.add(new construct_diagnostics_1.InvalidPropertyValueDiagnostic('customCSS', new Error(`Unable to access file "${entrypoint}": ${err.message}`, { cause: err })));
                }
            }
        }
    }
    async bundle() {
        const customCSS = await (async () => {
            if (this.customCSS) {
                if ((0, construct_1.isEntrypoint)(this.customCSS)) {
                    const entrypoint = this.resolveContentFilePath(this.customCSS.entrypoint);
                    const content = await promises_1.default.readFile(entrypoint);
                    return content.toString('utf8');
                }
                return this.customCSS.content;
            }
        })();
        return new dashboard_bundle_1.DashboardBundle(this, {
            customCSS,
        });
    }
    synthesize() {
        return {
            tags: this.tags,
            customUrl: this.customUrl,
            customDomain: this.customDomain,
            logo: this.logo,
            favicon: this.favicon,
            link: this.link,
            header: this.header,
            description: this.description,
            width: this.width,
            refreshRate: this.refreshRate,
            paginate: this.paginate,
            paginationRate: this.paginationRate,
            checksPerPage: this.checksPerPage,
            useTagsAndOperator: this.useTagsAndOperator,
            hideTags: this.hideTags,
            enableIncidents: this.enableIncidents,
            expandChecks: this.expandChecks,
            showHeader: this.showHeader,
            isPrivate: this.isPrivate,
            showP95: this.showP95,
            showP99: this.showP99,
        };
    }
}
exports.Dashboard = Dashboard;
//# sourceMappingURL=dashboard.js.map