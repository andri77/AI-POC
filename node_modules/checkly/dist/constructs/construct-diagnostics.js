"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConstructDiagnostics = exports.ConstructDiagnostic = exports.UnsupportedRuntimeFeatureDiagnostic = exports.DeprecatedConstructDiagnostic = exports.RemovedPropertyDiagnostic = exports.DeprecatedPropertyDiagnostic = exports.InvalidPropertyValueDiagnostic = void 0;
const diagnostics_1 = require("./diagnostics");
class InvalidPropertyValueDiagnostic extends diagnostics_1.ErrorDiagnostic {
    property;
    constructor(property, error) {
        super({
            title: `Invalid property value`,
            message: `The value provided for property "${property}" is not valid.`
                + `\n\n`
                + `Reason: ${error.message}`,
            error,
        });
        this.property = property;
    }
}
exports.InvalidPropertyValueDiagnostic = InvalidPropertyValueDiagnostic;
class DeprecatedPropertyDiagnostic extends diagnostics_1.WarningDiagnostic {
    property;
    constructor(property, error) {
        super({
            title: `Use of deprecated property`,
            message: `Property "${property}" is deprecated and will eventually be removed.`
                + `\n\n`
                + `Hint: ${error.message}`,
        });
        this.property = property;
    }
}
exports.DeprecatedPropertyDiagnostic = DeprecatedPropertyDiagnostic;
class RemovedPropertyDiagnostic extends diagnostics_1.ErrorDiagnostic {
    property;
    constructor(property, error) {
        super({
            title: `Use of removed property`,
            message: `Property "${property}" has been removed.`
                + `\n\n`
                + `Hint: ${error.message}`,
            error,
        });
        this.property = property;
    }
}
exports.RemovedPropertyDiagnostic = RemovedPropertyDiagnostic;
class DeprecatedConstructDiagnostic extends diagnostics_1.WarningDiagnostic {
    construct;
    constructor(construct, error) {
        super({
            title: `Use of deprecated Construct`,
            message: `Construct "${construct}" is deprecated and will eventually be removed.`
                + `\n\n`
                + `Hint: ${error.message}`,
        });
        this.construct = construct;
    }
}
exports.DeprecatedConstructDiagnostic = DeprecatedConstructDiagnostic;
class UnsupportedRuntimeFeatureDiagnostic extends diagnostics_1.ErrorDiagnostic {
    runtimeId;
    constructor(runtimeId, error) {
        super({
            title: `Use of unsupported runtime feature`,
            message: `Runtime "${runtimeId}" does not support the requested feature.`
                + `\n\n`
                + `Missing feature: ${error.message}`,
            error,
        });
        this.runtimeId = runtimeId;
    }
}
exports.UnsupportedRuntimeFeatureDiagnostic = UnsupportedRuntimeFeatureDiagnostic;
class ConstructDiagnostic extends diagnostics_1.Diagnostic {
    underlying;
    constructor(construct, underlying) {
        super({
            title: `[${construct.describe()}] ${underlying.title}`,
            message: underlying.message,
        });
        this.underlying = underlying;
    }
    isFatal() {
        return this.underlying.isFatal();
    }
    isBenign() {
        return this.underlying.isBenign();
    }
}
exports.ConstructDiagnostic = ConstructDiagnostic;
class ConstructDiagnostics extends diagnostics_1.Diagnostics {
    construct;
    constructor(construct) {
        super();
        this.construct = construct;
    }
    add(diagnostic) {
        super.add(new ConstructDiagnostic(this.construct, diagnostic));
    }
}
exports.ConstructDiagnostics = ConstructDiagnostics;
//# sourceMappingURL=construct-diagnostics.js.map