"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlertChannel = exports.AlertChannelRef = void 0;
const construct_1 = require("./construct");
const project_1 = require("./project");
/**
 * Creates a reference to an existing Alert Channel.
 *
 * References link existing resources to a project without managing them.
 */
class AlertChannelRef extends construct_1.Construct {
    constructor(logicalId, physicalId) {
        super(AlertChannel.__checklyType, logicalId, physicalId, false);
        project_1.Session.registerConstruct(this);
    }
    describe() {
        return `AlertChannelRef:${this.logicalId}`;
    }
    synthesize() {
        return null;
    }
}
exports.AlertChannelRef = AlertChannelRef;
/**
 * Base class for creating alert channels that notify when checks fail or recover.
 *
 * Alert channels define how and when to send notifications when monitoring checks
 * fail, recover, or enter a degraded state. Checkly supports multiple alert channel types
 * including email, SMS, Slack, webhooks, and third-party integrations.
 *
 * **Plan Limitations:**
 * - **Hobby**: Up to 50 alert channels
 * - **Trial**: Up to 200 alert channels
 * - **Pay-as-you-go**: Up to 200 alert channels
 * - **Contract**: Up to 500 alert channels
 *
 * @example
 * ```typescript
 * // Email alert channel
 * const emailAlert = new EmailAlertChannel('team-email', {
 *   address: 'alerts@example.com',
 *   sendFailure: true,
 *   sendRecovery: true,
 *   sendDegraded: false
 * })
 *
 * // Slack alert channel with SSL monitoring
 * const slackAlert = new SlackAlertChannel('team-slack', {
 *   url: 'https://hooks.slack.com/services/...',
 *   sslExpiry: true,
 *   sslExpiryThreshold: 7  // Alert 7 days before SSL expiry
 * })
 * ```
 *
 * @see {@link https://www.checklyhq.com/docs/cli/constructs-reference/#alertchannel | AlertChannel API Reference}
 * @see {@link https://www.checklyhq.com/docs/alerting-and-retries/alert-channels/ | Alert Channels Documentation}
 */
class AlertChannel extends construct_1.Construct {
    sendRecovery;
    sendFailure;
    sendDegraded;
    sslExpiry;
    sslExpiryThreshold;
    static __checklyType = 'alert-channel';
    /**
     * Constructs the Alert Channel instance
     *
     * @param logicalId unique project-scoped resource name identification
     * @param props alert channel configuration properties
     */
    constructor(logicalId, props) {
        super(AlertChannel.__checklyType, logicalId);
        this.sendRecovery = props.sendRecovery;
        this.sendFailure = props.sendFailure;
        this.sendDegraded = props.sendDegraded;
        this.sslExpiry = props.sslExpiry;
        this.sslExpiryThreshold = props.sslExpiryThreshold;
    }
    static fromId(id) {
        return new AlertChannelRef(`alert-channel-${id}`, id);
    }
    allowInChecklyConfig() {
        return true;
    }
    synthesize() {
        return {
            sendRecovery: this.sendRecovery,
            sendFailure: this.sendFailure,
            sendDegraded: this.sendDegraded,
            sslExpiry: this.sslExpiry,
            sslExpiryThreshold: this.sslExpiryThreshold,
        };
    }
}
exports.AlertChannel = AlertChannel;
//# sourceMappingURL=alert-channel.js.map