"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckGroupV2 = void 0;
const check_group_v1_1 = require("./check-group-v1");
const common_diagnostics_1 = require("./internal/common-diagnostics");
/**
 * Creates a Check Group (v2).
 *
 * The following properties have changed since CheckGroupV1:
 *
 *   - {@link CheckGroupV2Props.alertEscalationPolicy}
 *     - The implicit default for this property has been removed, allowing
 *       individual check settings to take effect.
 *     - Can be set to `"global"` to match the earlier default behavior.
 *   - {@link CheckGroupV2Props.retryStrategy}
 *     - The implicit default for this property has been removed, allowing
 *       individual check settings to take effect.
 *   - {@link CheckGroupV2Props.runParallel}
 *     - The implicit default for this property has been removed, allowing
 *       individual check settings to take effect.
 */
class CheckGroupV2 extends check_group_v1_1.CheckGroupV1 {
    constructor(logicalId, props) {
        const { alertEscalationPolicy, useGlobalAlertSettings } = (() => {
            const { alertEscalationPolicy } = props;
            // Do we want to always use the global policy?
            if (alertEscalationPolicy === 'global') {
                return {
                    alertEscalationPolicy: undefined,
                    useGlobalAlertSettings: true,
                };
            }
            // Do we want to let checks keep their own policies?
            if (alertEscalationPolicy === undefined) {
                return {
                    alertEscalationPolicy,
                    useGlobalAlertSettings: undefined,
                };
            }
            // The group policy will always apply.
            return {
                alertEscalationPolicy,
                useGlobalAlertSettings: false,
            };
        })();
        super(logicalId, {
            ...props,
            alertEscalationPolicy,
        });
        // Must override; the V1 constructor will not give us the desired behavior.
        this.useGlobalAlertSettings = useGlobalAlertSettings;
    }
    describe() {
        return `CheckGroupV2:${this.logicalId}`;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async onBeforeValidate(diagnostics) {
        // No-op
    }
    async validateDoubleCheck(diagnostics) {
        await (0, common_diagnostics_1.validateRemovedDoubleCheck)(diagnostics, this);
    }
    synthesize() {
        return {
            ...super.synthesize(),
            doubleCheck: undefined,
            v: 2,
        };
    }
}
exports.CheckGroupV2 = CheckGroupV2;
//# sourceMappingURL=check-group-v2.js.map