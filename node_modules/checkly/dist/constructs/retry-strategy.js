"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RetryStrategyBuilder = void 0;
/**
 * Builder class for creating retry strategies.
 * Provides convenient methods to create different types of retry strategies.
 * Retry strategies control how and when to retry failed checks before marking them as failed.
 *
 * @example
 * ```typescript
 * // Fixed retry strategy - same delay between retries (60s, 60s, 60s)
 * const fixedRetry = RetryStrategyBuilder.fixedStrategy({
 *   maxRetries: 3,
 *   baseBackoffSeconds: 60,
 *   sameRegion: false
 * })
 *
 * // Linear retry strategy - increasing delay (10s, 20s, 30s)
 * const linearRetry = RetryStrategyBuilder.linearStrategy({
 *   maxRetries: 3,
 *   baseBackoffSeconds: 10,
 *   maxDurationSeconds: 600
 * })
 *
 * // Exponential retry strategy - exponential backoff (10s, 100s, 1000s)
 * const exponentialRetry = RetryStrategyBuilder.exponentialStrategy({
 *   maxRetries: 3,
 *   baseBackoffSeconds: 10
 * })
 *
 * // No retries - fail immediately
 * const noRetries = RetryStrategyBuilder.noRetries()
 *
 * // Retry on network errors only
 * const retryOnNetworkError = RetryStrategyBuilder.fixedStrategy({
 *   maxRetries: 1,
 *   baseBackoffSeconds: 30,
 *   sameRegion: false,
 *   onlyOn: 'NETWORK_ERROR'
 * })
 * ```
 *
 * @see {@link https://www.checklyhq.com/docs/alerting-and-retries/retries/ | Retry Strategies Documentation}
 */
class RetryStrategyBuilder {
    static DEFAULT_BASE_BACKOFF_SECONDS = 60;
    static DEFAULT_MAX_RETRIES = 2;
    static DEFAULT_MAX_DURATION_SECONDS = 60 * 10;
    static DEFAULT_SAME_REGION = true;
    /**
     * Each retry is run with the same backoff between attempts.
     */
    static fixedStrategy(options) {
        return RetryStrategyBuilder.retryStrategy('FIXED', options);
    }
    /**
     * The delay between retries increases linearly
     *
     * The delay between retries is calculated using `baseBackoffSeconds * attempt`.
     * For example, retries will be run with a backoff of 10s, 20s, 30s, and so on.
     */
    static linearStrategy(options) {
        return RetryStrategyBuilder.retryStrategy('LINEAR', options);
    }
    /**
     * The delay between retries increases exponentially
     *
     * The delay between retries is calculated using `baseBackoffSeconds ^ attempt`.
     * For example, retries will be run with a backoff of 10s, 100s, 1000s, and so on.
     */
    static exponentialStrategy(options) {
        return RetryStrategyBuilder.retryStrategy('EXPONENTIAL', options);
    }
    /**
     * No retries are performed.
     */
    static noRetries() {
        return RetryStrategyBuilder.retryStrategy('NO_RETRIES');
    }
    static retryStrategy(type, options) {
        return {
            type,
            baseBackoffSeconds: options?.baseBackoffSeconds ?? RetryStrategyBuilder.DEFAULT_BASE_BACKOFF_SECONDS,
            maxRetries: options?.maxRetries ?? RetryStrategyBuilder.DEFAULT_MAX_RETRIES,
            maxDurationSeconds: options?.maxDurationSeconds ?? RetryStrategyBuilder.DEFAULT_MAX_DURATION_SECONDS,
            sameRegion: options?.sameRegion ?? RetryStrategyBuilder.DEFAULT_SAME_REGION,
            onlyOn: options?.onlyOn,
        };
    }
}
exports.RetryStrategyBuilder = RetryStrategyBuilder;
//# sourceMappingURL=retry-strategy.js.map