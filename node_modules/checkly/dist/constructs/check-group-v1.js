"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckGroupV1 = void 0;
const node_path_1 = __importDefault(require("node:path"));
const glob_1 = require("glob");
const construct_diagnostics_1 = require("./construct-diagnostics");
const constants_1 = __importDefault(require("../constants"));
const util_1 = require("../services/util");
const alert_channel_subscription_1 = require("./alert-channel-subscription");
const browser_check_1 = require("./browser-check");
const check_group_ref_1 = require("./check-group-ref");
const construct_1 = require("./construct");
const multi_step_check_1 = require("./multi-step-check");
const private_location_group_assignment_1 = require("./private-location-group-assignment");
const ref_1 = require("./ref");
const project_1 = require("./project");
const common_diagnostics_1 = require("./internal/common-diagnostics");
const defaultApiCheckDefaults = {
    headers: [],
    queryParameters: [],
    url: '',
    basicAuth: {
        username: '',
        password: '',
    },
};
/**
 * Creates a Check Group (v1).
 *
 * We strongly recommend upgrading to {@link CheckGroupV2} instead.
 *
 * The original CheckGroup v1 comes with implicit defaults that are not
 * intuitive and make it impossible to keep check-level behavior for
 * certain properties.
 *
 * The following properties will always use the group's values if set, or
 * implicit defaults if not set:
 *
 *   - {@link CheckGroupV1Props.alertEscalationPolicy}
 *   - {@link CheckGroupV1Props.retryStrategy}
 *   - {@link CheckGroupV1Props.runParallel}
 *
 * Please check the documentation for the individual properties to see their
 * behavior.
 *
 * For more information regarding the update, please see:
 *   https://feedback.checklyhq.com/changelog/checkly-groups-update-organize-checks-your-way
 *
 * @deprecated Use {@link CheckGroupV2} instead.
 */
class CheckGroupV1 extends construct_1.Construct {
    name;
    activated;
    muted;
    doubleCheck;
    runtimeId;
    locations;
    privateLocations;
    tags;
    concurrency;
    frequency;
    environmentVariables;
    alertChannels;
    localSetupScript;
    localTearDownScript;
    apiCheckDefaults;
    browserChecks;
    multiStepChecks;
    retryStrategy;
    runParallel;
    alertSettings;
    useGlobalAlertSettings;
    static __checklyType = 'check-group';
    /**
     * Constructs the CheckGroup instance
     *
     * @param logicalId unique project-scoped resource name identification
     * @param props CheckGroup configuration properties
     *
     * {@link https://checklyhq.com/docs/cli/constructs-reference/#checkgroup Read more in the docs}
     */
    constructor(logicalId, props) {
        super(CheckGroupV1.__checklyType, logicalId);
        this.name = props.name;
        this.activated = props.activated;
        this.muted = props.muted;
        this.doubleCheck = props.doubleCheck;
        this.tags = props.tags;
        this.runtimeId = props.runtimeId;
        this.locations = props.locations ?? [];
        this.privateLocations = props.privateLocations;
        this.concurrency = props.concurrency;
        // `frequency` is not a CheckGroup resource property. Not present in synthesize()
        this.frequency = props.frequency;
        this.apiCheckDefaults = { ...defaultApiCheckDefaults, ...props.apiCheckDefaults };
        this.alertSettings = props.alertEscalationPolicy;
        this.useGlobalAlertSettings = !this.alertSettings;
        this.environmentVariables = props.environmentVariables ?? [];
        this.alertChannels = props.alertChannels ?? [];
        this.localSetupScript = props.localSetupScript;
        this.localTearDownScript = props.localTearDownScript;
        this.retryStrategy = props.retryStrategy;
        this.runParallel = props.runParallel;
        // `browserChecks` is not a CheckGroup resource property. Not present in synthesize()
        this.browserChecks = props.browserChecks;
        const fileAbsolutePath = project_1.Session.checkFileAbsolutePath;
        if (props.browserChecks?.testMatch) {
            this.__addChecks(fileAbsolutePath, props.browserChecks.testMatch, constants_1.default.BROWSER);
        }
        this.multiStepChecks = props.multiStepChecks;
        if (props.multiStepChecks?.testMatch) {
            this.__addChecks(fileAbsolutePath, props.multiStepChecks.testMatch, constants_1.default.MULTI_STEP);
        }
        project_1.Session.registerConstruct(this);
        this.__addSubscriptions();
        this.__addPrivateLocationGroupAssignments();
    }
    describe() {
        return `CheckGroupV1:${this.logicalId}`;
    }
    // eslint-disable-next-line require-await
    async onBeforeValidate(diagnostics) {
        diagnostics.add(new construct_diagnostics_1.DeprecatedConstructDiagnostic('CheckGroup', new Error(`Please update to CheckGroupV2 which has more intuitive behavior.`
            + `\n\n`
            + `For more information, please see:\n`
            + `  https://feedback.checklyhq.com/changelog/checkly-groups-update-organize-checks-your-way`)));
    }
    async validateDoubleCheck(diagnostics) {
        await (0, common_diagnostics_1.validateDeprecatedDoubleCheck)(diagnostics, this);
    }
    async validate(diagnostics) {
        await super.validate(diagnostics);
        await this.onBeforeValidate(diagnostics);
        await this.validateDoubleCheck(diagnostics);
        if (this.environmentVariables) {
            this.environmentVariables.forEach(ev => {
                // only empty string is checked because the KeyValuePair.value doesn't allow undefined or null.
                if (ev.value === '') {
                    diagnostics.add(new construct_diagnostics_1.InvalidPropertyValueDiagnostic('environmentVariables', new Error(`Value must not be empty.`)));
                }
            });
        }
        if (this.localSetupScript) {
            diagnostics.add(new construct_diagnostics_1.DeprecatedPropertyDiagnostic('localSetupScript', new Error(`Use the setupScript property directly in your ApiChecks instead.`)));
        }
        if (this.localTearDownScript) {
            diagnostics.add(new construct_diagnostics_1.DeprecatedPropertyDiagnostic('localTearDownScript', new Error(`Use the tearDownScript property directly in your ApiChecks instead.`)));
        }
    }
    static fromId(id) {
        return new check_group_ref_1.CheckGroupRef(`check-group-${id}`, id);
    }
    __addChecks(fileAbsolutePath, testMatch, checkType) {
        const parent = node_path_1.default.dirname(fileAbsolutePath);
        const matched = glob_1.glob.sync(testMatch, { nodir: true, cwd: parent });
        for (const match of matched) {
            const filepath = node_path_1.default.join(parent, match);
            const props = {
                group: this,
                name: match,
                code: {
                    entrypoint: filepath,
                },
                // the browserChecks props inherited from the group are applied in BrowserCheck.constructor()
            };
            const checkLogicalId = (0, util_1.pathToPosix)(node_path_1.default.relative(project_1.Session.basePath, filepath));
            if (checkType === constants_1.default.BROWSER) {
                new browser_check_1.BrowserCheck(checkLogicalId, props);
            }
            else {
                new multi_step_check_1.MultiStepCheck(checkLogicalId, props);
            }
        }
    }
    __addSubscriptions() {
        if (!this.alertChannels) {
            return;
        }
        for (const alertChannel of this.alertChannels) {
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            const subscription = new alert_channel_subscription_1.AlertChannelSubscription(`check-group-alert-channel-subscription#${this.logicalId}#${alertChannel.logicalId}`, {
                alertChannelId: ref_1.Ref.from(alertChannel.logicalId),
                groupId: ref_1.Ref.from(this.logicalId),
                activated: true,
            });
        }
    }
    __addPrivateLocationGroupAssignments() {
        if (!this.privateLocations) {
            return;
        }
        for (const privateLocation of this.privateLocations) {
            // slugName strings are processed in loadAllPrivateLocations()
            if (typeof privateLocation === 'string') {
                continue;
            }
            // use private location assignment for instances
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            const assignment = new private_location_group_assignment_1.PrivateLocationGroupAssignment(`private-location-group-assignment#${this.logicalId}#${privateLocation.logicalId}`, {
                privateLocationId: ref_1.Ref.from(privateLocation.logicalId),
                groupId: ref_1.Ref.from(this.logicalId),
            });
        }
    }
    getCheckDefaults() {
        // TODO: investigate if make sense to add all other check's properties
        return {
            frequency: this.frequency,
        };
    }
    getBrowserCheckDefaults() {
        // TODO: investigate if make sense to add all other browser-check's properties
        return {
            frequency: this.browserChecks?.frequency,
        };
    }
    getMultiStepCheckDefaults() {
        return {
            frequency: this.multiStepChecks?.frequency,
        };
    }
    synthesize() {
        return {
            name: this.name,
            activated: this.activated,
            muted: this.muted,
            tags: this.tags,
            locations: this.locations,
            runtimeId: this.runtimeId,
            // private-location instances are assigned with loadAllPrivateLocations()
            privateLocations: undefined,
            concurrency: this.concurrency,
            localSetupScript: this.localSetupScript,
            localTearDownScript: this.localTearDownScript,
            apiCheckDefaults: this.apiCheckDefaults,
            environmentVariables: this.environmentVariables,
            // The backend doesn't actually support the `NO_RETRIES` type, it uses `null` instead.
            retryStrategy: this.retryStrategy?.type === 'NO_RETRIES'
                ? null
                : this.retryStrategy,
            // When `retryStrategy: NO_RETRIES` and `doubleCheck: undefined`, we want to let the user disable all retries.
            // The backend has a Joi default of `doubleCheck: true`, though, so we need special handling for this case.
            doubleCheck: this.doubleCheck === undefined && this.retryStrategy?.type === 'NO_RETRIES'
                ? false
                : this.doubleCheck,
            runParallel: this.runParallel,
            alertSettings: this.alertSettings,
            useGlobalAlertSettings: this.useGlobalAlertSettings,
        };
    }
}
exports.CheckGroupV1 = CheckGroupV1;
//# sourceMappingURL=check-group-v1.js.map