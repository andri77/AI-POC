"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isContent = exports.isEntrypoint = exports.Construct = void 0;
const node_path_1 = __importDefault(require("node:path"));
const project_1 = require("./project");
const ref_1 = require("./ref");
/**
 * Abstract base class for all constructs in the Checkly CLI system.
 * Provides common functionality for validation, bundling, and resource management.
 *
 * This class is extended by all built-in constructs like ApiCheck, BrowserCheck, etc.
 * It should not be extended directly by user code.
 */
class Construct {
    /** The type identifier of the construct */
    type;
    /** Unique logical identifier within the project scope */
    logicalId;
    /** Physical identifier from the Checkly API (if exists) */
    physicalId;
    /** Whether this construct is a member of the project */
    member;
    /** Absolute path to the check file that created this construct */
    checkFileAbsolutePath;
    /**
     * Creates a new construct instance.
     *
     * @param type The type identifier for this construct
     * @param logicalId Unique logical identifier within the project scope
     * @param physicalId Optional physical identifier from the Checkly API
     * @param member Whether this construct is a member of the project
     */
    constructor(type, logicalId, physicalId, member) {
        this.logicalId = logicalId;
        this.type = type;
        this.physicalId = physicalId;
        this.member = member ?? true;
        this.checkFileAbsolutePath = project_1.Session.checkFileAbsolutePath;
        project_1.Session.validateCreateConstruct(this);
    }
    /**
     * Creates a reference to this construct that can be used in other constructs.
     *
     * @returns A reference object that can be used to link to this construct
     */
    ref() {
        return ref_1.Ref.from(this.logicalId);
    }
    /**
     * Determines whether this construct is allowed to be referenced in checkly.config.ts.
     * Most constructs should not be directly referenced in the config file.
     *
     * @returns true if this construct can be used in checkly.config.ts, false otherwise
     */
    allowInChecklyConfig() {
        return false;
    }
    /**
     * Resolves a content file path relative to the check file that created this construct.
     * If the path is already absolute, returns it as-is.
     *
     * @param contentPath The relative or absolute path to resolve
     * @returns The absolute path to the content file
     * @throws Error if checkFileAbsolutePath is not set and a relative path is provided
     */
    resolveContentFilePath(contentPath) {
        if (node_path_1.default.isAbsolute(contentPath)) {
            return contentPath;
        }
        if (!this.checkFileAbsolutePath) {
            throw new Error('Internal error: attempting to use relative content file path without checkFileAbsolutePath set');
        }
        return node_path_1.default.join(node_path_1.default.dirname(this.checkFileAbsolutePath), contentPath);
    }
    /**
     * Validates the Construct, allowing multiple issues to be brought into
     * attention via the provided Diagnostics.
     *
     * @param diagnostics The Diagnostics instance that any issues should be added to.
     * @returns A Promise that resolves when validation is complete.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, require-await
    async validate(diagnostics) {
        return;
    }
    /**
     * Bundles the Construct into a representation that can be synthesized. By
     * default, that representation is the Construct itself, but a different
     * representation may also be returned.
     *
     * Can be used to perform heavier tasks that the Construct constructor may
     * not be suitable for.
     *
     * @returns A Promise that resolves to the bundled representation of the Construct.
     */
    // eslint-disable-next-line require-await
    async bundle() {
        return this;
    }
}
exports.Construct = Construct;
/**
 * Type guard to check if a value is an Entrypoint object.
 *
 * @param value The value to check
 * @returns true if the value is an Entrypoint, false otherwise
 */
function isEntrypoint(value) {
    return 'entrypoint' in Object(value);
}
exports.isEntrypoint = isEntrypoint;
/**
 * Type guard to check if a value is a Content object.
 *
 * @param value The value to check
 * @returns true if the value is a Content, false otherwise
 */
function isContent(value) {
    return 'content' in Object(value);
}
exports.isContent = isContent;
//# sourceMappingURL=construct.js.map