import { Codegen, Context } from './internal/codegen';
import { GeneratedFile, Value } from '../sourcegen';
import { AlertEscalationResource } from './alert-escalation-policy-codegen';
import { ApiCheckDefaultConfig } from './api-check';
import { EnvironmentVariable } from './environment-variable';
import { FrequencyResource } from './frequency-codegen';
import { RetryStrategyResource } from './retry-strategy-codegen';
export interface BrowserCheckConfigResource {
    testMatch: string | string[];
    frequency?: FrequencyResource;
}
export interface MultiStepCheckConfigResource {
    testMatch: string | string[];
    frequency?: FrequencyResource;
}
export interface CheckGroupResource {
    id: number;
    name: string;
    activated?: boolean;
    muted?: boolean;
    doubleCheck?: boolean | null;
    runtimeId?: string | null;
    locations?: string[];
    tags?: string[];
    concurrency?: number;
    frequency?: FrequencyResource;
    environmentVariables?: EnvironmentVariable[];
    browserChecks?: BrowserCheckConfigResource;
    multiStepChecks?: MultiStepCheckConfigResource;
    alertSettings?: AlertEscalationResource | null;
    useGlobalAlertSettings?: boolean | null;
    localSetupScript?: string;
    setupSnippetId?: number | null;
    localTearDownScript?: string;
    tearDownSnippetId?: number | null;
    apiCheckDefaults?: ApiCheckDefaultConfig;
    retryStrategy?: RetryStrategyResource | 'FALLBACK';
    runParallel?: boolean | null;
}
export declare function valueForCheckGroupFromId(genfile: GeneratedFile, physicalId: number): Value;
export declare class CheckGroupCodegen extends Codegen<CheckGroupResource> {
    validateSafety(resource: CheckGroupResource): void;
    describe(resource: CheckGroupResource): string;
    prepare(logicalId: string, resource: CheckGroupResource, context: Context): void;
    gencode(logicalId: string, resource: CheckGroupResource, context: Context): void;
}
