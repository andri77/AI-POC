"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HeartbeatCheck = exports.HeartbeatMonitor = void 0;
const monitor_1 = require("./monitor");
const project_1 = require("./project");
const luxon_1 = require("luxon");
const constants_1 = __importDefault(require("../constants"));
function _customPeriodGraceValidation(heartbeat) {
    const now = luxon_1.DateTime.now();
    const addedTimePeriod = now.plus({ [heartbeat.periodUnit]: heartbeat.period });
    const addedGracePeriod = now.plus({ [heartbeat.graceUnit]: heartbeat.grace });
    const MAX_PERIOD_GRACE_DAYS = 365;
    const MIN_PERIOD_SECONDS = 30;
    if (addedTimePeriod.diff(now, 'days').days > MAX_PERIOD_GRACE_DAYS
        || addedTimePeriod.diff(now, 'seconds').seconds < MIN_PERIOD_SECONDS) {
        throw new Error('Period must be between 30 seconds and 365 days.');
    }
    if (addedGracePeriod.diff(now, 'days').days > MAX_PERIOD_GRACE_DAYS) {
        throw new Error('Grace must be less than 366 days.');
    }
}
/**
 * Creates a Heartbeat Monitor
 */
class HeartbeatMonitor extends monitor_1.Monitor {
    heartbeat;
    /**
     * Constructs the Heartbeat Monitor instance
     *
     * @param logicalId unique project-scoped resource name identification
     * @param props configuration properties
     * {@link https://checklyhq.com/docs/cli/constructs-reference/#heartbeatmonitor Read more in the docs}
     */
    constructor(logicalId, props) {
        super(logicalId, props);
        _customPeriodGraceValidation(props);
        this.heartbeat = {
            period: props.period,
            periodUnit: props.periodUnit,
            grace: props.grace,
            graceUnit: props.graceUnit,
        };
        project_1.Session.registerConstruct(this);
        this.addSubscriptions();
    }
    describe() {
        return `HeartbeatMonitor:${this.logicalId}`;
    }
    synthesize() {
        return {
            ...super.synthesize(),
            checkType: constants_1.default.HEARTBEAT,
            heartbeat: this.heartbeat,
        };
    }
}
exports.HeartbeatMonitor = HeartbeatMonitor;
exports.HeartbeatCheck = HeartbeatMonitor;
//# sourceMappingURL=heartbeat-monitor.js.map