"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TcpCheck = exports.TcpMonitor = exports.TcpAssertionBuilder = void 0;
const monitor_1 = require("./monitor");
const project_1 = require("./project");
const assertion_1 = require("./internal/assertion");
const common_diagnostics_1 = require("./internal/common-diagnostics");
/**
 * Builder class for creating TCP monitor assertions.
 * Provides methods to create assertions for TCP connection responses.
 *
 * @example
 * ```typescript
 * // Response time assertions
 * TcpAssertionBuilder.responseTime().lessThan(1000)
 * TcpAssertionBuilder.responseTime().greaterThan(100)
 *
 * // Response data assertions
 * TcpAssertionBuilder.responseData().contains('SMTP')
 * TcpAssertionBuilder.responseData().notContains('error')
 * ```
 */
class TcpAssertionBuilder {
    /**
     * Creates an assertion builder for TCP response data.
     * @param property Optional property path for response data
     * @returns A general assertion builder for response data content
     */
    static responseData(property) {
        return new assertion_1.GeneralAssertionBuilder('RESPONSE_DATA', property);
    }
    /**
     * Creates an assertion builder for TCP response time.
     * @returns A numeric assertion builder for response time in milliseconds
     */
    static responseTime() {
        return new assertion_1.NumericAssertionBuilder('RESPONSE_TIME');
    }
}
exports.TcpAssertionBuilder = TcpAssertionBuilder;
/**
 * Creates a TCP Monitor
 */
class TcpMonitor extends monitor_1.Monitor {
    request;
    degradedResponseTime;
    maxResponseTime;
    /**
     * Constructs the TCP Monitor instance
     *
     * @param logicalId unique project-scoped resource name identification
     * @param props configuration properties
     *
     * {@link https://checklyhq.com/docs/cli/constructs-reference/#tcpmonitor Read more in the docs}
     */
    constructor(logicalId, props) {
        super(logicalId, props);
        this.request = props.request;
        this.degradedResponseTime = props.degradedResponseTime;
        this.maxResponseTime = props.maxResponseTime;
        project_1.Session.registerConstruct(this);
        this.addSubscriptions();
        this.addPrivateLocationCheckAssignments();
    }
    describe() {
        return `TcpMonitor:${this.logicalId}`;
    }
    async validate(diagnostics) {
        await super.validate(diagnostics);
        await (0, common_diagnostics_1.validateResponseTimes)(diagnostics, this, {
            degradedResponseTime: 5000,
            maxResponseTime: 5000,
        });
    }
    synthesize() {
        return {
            ...super.synthesize(),
            checkType: 'TCP',
            request: this.request,
            degradedResponseTime: this.degradedResponseTime,
            maxResponseTime: this.maxResponseTime,
        };
    }
}
exports.TcpMonitor = TcpMonitor;
exports.TcpCheck = TcpMonitor;
//# sourceMappingURL=tcp-monitor.js.map