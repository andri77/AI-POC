import { Bundle } from './construct';
import { MultiStepCheck } from './multi-step-check';
import { SharedFileRef } from './project';
export interface MultiStepCheckBundleProps {
    script: string;
    scriptPath?: string;
    dependencies?: SharedFileRef[];
}
export declare class MultiStepCheckBundle implements Bundle {
    multiStepCheck: MultiStepCheck;
    script: string;
    scriptPath?: string;
    dependencies?: SharedFileRef[];
    constructor(multiStepCheck: MultiStepCheck, props: MultiStepCheckBundleProps);
    synthesize(): {
        script: string;
        scriptPath: string | undefined;
        dependencies: number[] | undefined;
        checkType: string;
        playwrightConfig: import("./playwright-config").PlaywrightConfig | undefined;
        runtimeId: string | undefined;
        environmentVariables: import("./key-value-pair").default[] | undefined;
        name: string;
        activated: boolean | undefined;
        muted: boolean | undefined;
        shouldFail: boolean | undefined;
        locations: (keyof import("..").Region)[] | undefined;
        privateLocations: undefined;
        tags: string[] | undefined;
        frequency: number | undefined;
        frequencyOffset: number | undefined;
        groupId: import("./ref").Ref | null;
        retryStrategy: import("./retry-strategy").RetryStrategy | null | undefined;
        doubleCheck: boolean | undefined;
        alertSettings: import("./alert-escalation-policy").AlertEscalation | undefined;
        useGlobalAlertSettings: boolean | undefined;
        runParallel: boolean | undefined;
        triggerIncident: {
            serviceId: import("./ref").Ref;
            severity: "MINOR" | "MEDIUM" | "MAJOR" | "CRITICAL";
            name: string;
            description: string;
            notifySubscribers: boolean;
        } | undefined;
    };
}
