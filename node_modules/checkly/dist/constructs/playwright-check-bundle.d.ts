import { Bundle } from './construct';
import { PlaywrightCheck } from './playwright-check';
import { Ref } from './ref';
export interface PlaywrightCheckBundleProps {
    groupId?: Ref;
    codeBundlePath?: string;
    browsers?: string[];
    cacheHash?: string;
    playwrightVersion?: string;
    installCommand?: string;
    testCommand: string;
}
export declare class PlaywrightCheckBundle implements Bundle {
    playwrightCheck: PlaywrightCheck;
    groupId?: Ref;
    codeBundlePath?: string;
    browsers?: string[];
    cacheHash?: string;
    playwrightVersion?: string;
    installCommand?: string;
    testCommand: string;
    constructor(playwrightCheck: PlaywrightCheck, props: PlaywrightCheckBundleProps);
    synthesize(): {
        groupId: Ref | undefined;
        codeBundlePath: string | undefined;
        browsers: string[] | undefined;
        cacheHash: string | undefined;
        playwrightVersion: string | undefined;
        installCommand: string | undefined;
        testCommand: string;
        checkType: string;
        runtimeId: string | undefined;
        environmentVariables: import("./key-value-pair").default[] | undefined;
        name: string;
        activated: boolean | undefined;
        muted: boolean | undefined;
        shouldFail: boolean | undefined;
        locations: (keyof import("..").Region)[] | undefined;
        privateLocations: undefined;
        tags: string[] | undefined;
        frequency: number | undefined;
        frequencyOffset: number | undefined;
        retryStrategy: import("./retry-strategy").RetryStrategy | null | undefined;
        doubleCheck: boolean | undefined;
        alertSettings: import("./alert-escalation-policy").AlertEscalation | undefined;
        useGlobalAlertSettings: boolean | undefined;
        runParallel: boolean | undefined;
        triggerIncident: {
            serviceId: Ref;
            severity: "MINOR" | "MEDIUM" | "MAJOR" | "CRITICAL";
            name: string;
            description: string;
            notifySubscribers: boolean;
        } | undefined;
    };
}
