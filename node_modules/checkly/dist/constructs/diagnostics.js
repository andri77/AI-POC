"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Diagnostics = exports.NoticeDiagnostic = exports.WarningDiagnostic = exports.ErrorDiagnostic = exports.Diagnostic = void 0;
/**
 * Abstract base class for diagnostic messages.
 * Diagnostics are used to report issues during validation and processing.
 */
class Diagnostic {
    /** The title/summary of the diagnostic */
    title;
    /** Detailed message describing the diagnostic */
    message;
    /**
     * Creates a new diagnostic instance.
     * @param options The diagnostic configuration
     */
    constructor(options) {
        this.title = options.title;
        this.message = options.message;
    }
}
exports.Diagnostic = Diagnostic;
class ErrorDiagnostic extends Diagnostic {
    error;
    constructor(options) {
        super(options);
        this.error = options.error;
    }
    isFatal() {
        return true;
    }
    isBenign() {
        return false;
    }
}
exports.ErrorDiagnostic = ErrorDiagnostic;
class WarningDiagnostic extends Diagnostic {
    isFatal() {
        return false;
    }
    isBenign() {
        return false;
    }
}
exports.WarningDiagnostic = WarningDiagnostic;
class NoticeDiagnostic extends Diagnostic {
    isFatal() {
        return false;
    }
    isBenign() {
        return true;
    }
}
exports.NoticeDiagnostic = NoticeDiagnostic;
class Diagnostics {
    observations = [];
    #fatal = false;
    #benign = true;
    isFatal() {
        return this.#fatal;
    }
    isBenign() {
        return this.#benign;
    }
    add(diagnostic) {
        this.observations.push(diagnostic);
        this.#fatal ||= diagnostic.isFatal();
        this.#benign &&= diagnostic.isBenign();
    }
    extend(...diagnostics) {
        for (const diags of diagnostics) {
            for (const observation of diags.observations) {
                this.add(observation);
            }
        }
    }
}
exports.Diagnostics = Diagnostics;
//# sourceMappingURL=diagnostics.js.map