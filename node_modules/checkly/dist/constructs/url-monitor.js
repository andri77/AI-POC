"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UrlMonitor = void 0;
const common_diagnostics_1 = require("./internal/common-diagnostics");
const monitor_1 = require("./monitor");
const project_1 = require("./project");
/**
 * Creates a URL Monitor to check HTTP endpoint availability and response times.
 *
 * URL monitors are simplified HTTP checks that verify if a URL is accessible and responding
 * within acceptable time limits. They only support GET requests and status code assertions.
 * For more advanced HTTP monitoring with custom methods, headers, and body assertions,
 * use ApiCheck instead.
 *
 * @example
 * ```typescript
 * // Basic URL monitor
 * new UrlMonitor('homepage-monitor', {
 *   name: 'Homepage Monitor',
 *   frequency: Frequency.EVERY_5M,
 *   locations: ['us-east-1', 'eu-west-1'],
 *   request: {
 *     url: 'https://example.com',
 *     assertions: [
 *       UrlAssertionBuilder.statusCode().equals(200)
 *     ]
 *   }
 * })
 *
 * // URL monitor with performance thresholds
 * new UrlMonitor('api-health', {
 *   name: 'API Health Check',
 *   frequency: Frequency.EVERY_1M,
 *   locations: ['us-east-1', 'eu-west-1', 'ap-southeast-1'],
 *   request: {
 *     url: 'https://api.example.com/health',
 *     followRedirects: false,
 *     assertions: [
 *       UrlAssertionBuilder.statusCode().equals(200)
 *     ]
 *   },
 *   degradedResponseTime: 1000,
 *   maxResponseTime: 3000,
 *   alertChannels: [emailAlert, slackAlert]
 * })
 *
 * // URL monitor with SSL verification disabled (for internal/dev endpoints)
 * new UrlMonitor('internal-service', {
 *   name: 'Internal Service Check',
 *   frequency: Frequency.EVERY_10M,
 *   privateLocations: ['datacenter-1'],
 *   request: {
 *     url: 'https://internal.company.local:8443/status',
 *     skipSSL: true,
 *     assertions: [
 *       UrlAssertionBuilder.statusCode().lessThan(400)
 *     ]
 *   }
 * })
 * ```
 *
 * @see {@link https://www.checklyhq.com/docs/cli/constructs-reference/#urlmonitor | UrlMonitor API Reference}
 * @see {@link https://www.checklyhq.com/docs/url-monitors/ | URL Monitors Documentation}
 */
class UrlMonitor extends monitor_1.Monitor {
    request;
    degradedResponseTime;
    maxResponseTime;
    /**
     * Constructs the URL Monitor instance
     *
     * @param logicalId unique project-scoped resource name identification
     * @param props configuration properties
     *
     * {@link https://checklyhq.com/docs/cli/constructs-reference/#urlmonitor Read more in the docs}
     */
    constructor(logicalId, props) {
        super(logicalId, props);
        this.request = props.request;
        this.degradedResponseTime = props.degradedResponseTime;
        this.maxResponseTime = props.maxResponseTime;
        project_1.Session.registerConstruct(this);
        this.addSubscriptions();
        this.addPrivateLocationCheckAssignments();
    }
    describe() {
        return `UrlMonitor:${this.logicalId}`;
    }
    supportsOnlyOnNetworkErrorRetryStrategy() {
        return true;
    }
    async validate(diagnostics) {
        await super.validate(diagnostics);
        await (0, common_diagnostics_1.validateResponseTimes)(diagnostics, this, {
            degradedResponseTime: 30000,
            maxResponseTime: 30000,
        });
    }
    synthesize() {
        return {
            ...super.synthesize(),
            checkType: 'URL',
            request: {
                ...this.request,
                method: 'GET',
            },
            degradedResponseTime: this.degradedResponseTime,
            maxResponseTime: this.maxResponseTime,
        };
    }
}
exports.UrlMonitor = UrlMonitor;
//# sourceMappingURL=url-monitor.js.map